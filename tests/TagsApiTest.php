<?php
/**
 * Tests CRUD pour l'API des tags
 */

use PHPUnit\Framework\TestCase;

class TagsApiTest extends TestCase {
    private static $testTagId = null;
    
    protected function setUp(): void {
        // Login avant chaque test
        $loginSuccess = TestHttpClient::login($_ENV['ADMIN_USERNAME'], $_ENV['ADMIN_PASSWORD']);
        if (!$loginSuccess) {
            $this->markTestSkipped('Cannot login to admin');
        }
    }
    
    protected function tearDown(): void {
        // Nettoyer le tag de test si il existe
        if (self::$testTagId) {
            TestHttpClient::request('DELETE', '/api/admin/tags.php?id=' . self::$testTagId);
            self::$testTagId = null;
        }
    }
    
    /**
     * Test GET - Récupérer tous les tags
     */
    public function testGetAllTags(): void {
        $response = TestHttpClient::request('GET', '/api/admin/tags.php');
        
        $this->assertEquals(200, $response['code']);
        $this->assertTrue($response['body']['success']);
        $this->assertArrayHasKey('data', $response['body']);
        $this->assertIsArray($response['body']['data']);
        
        // Vérifier la structure d'un tag si ils existent
        if (!empty($response['body']['data'])) {
            $tag = $response['body']['data'][0];
            $this->assertArrayHasKey('id', $tag);
            $this->assertArrayHasKey('name', $tag);
            $this->assertArrayHasKey('slug', $tag);
            $this->assertArrayHasKey('color', $tag);
            $this->assertArrayHasKey('category_count', $tag);
        }
    }
    
    /**
     * Test POST - Créer un tag valide
     */
    public function testCreateValidTag(): void {
        $unique = uniqid();
        $tagData = [
            'name' => 'Test Tag PHPUnit ' . $unique,
            'slug' => 'test-tag-phpunit-' . $unique,
            'color' => '#FF5733',
            'display_order' => 999
        ];
        
        $response = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        
        $this->assertEquals(201, $response['code'], 'Should return 201 for valid tag creation');
        $this->assertTrue($response['body']['success'], 'Creation should be successful');
        $this->assertArrayHasKey('data', $response['body']);
        
        $createdTag = $response['body']['data'];
        $this->assertArrayHasKey('id', $createdTag);
        $this->assertEquals($tagData['name'], $createdTag['name']);
        $this->assertEquals($tagData['slug'], $createdTag['slug']);
        $this->assertEquals($tagData['color'], $createdTag['color']);
        $this->assertEquals($tagData['display_order'], $createdTag['display_order']);
        
        // Stocker l'ID pour le cleanup
        self::$testTagId = $createdTag['id'];
    }
    
    /**
     * Test POST - Créer un tag sans nom (invalide)
     */
    public function testCreateTagWithoutName(): void {
        $tagData = [
            'slug' => 'no-name-tag',
            'color' => '#FF5733'
        ];
        
        $response = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        
        $this->assertEquals(400, $response['code'], 'Should return 400 for missing name');
        $this->assertFalse($response['body']['success'], 'Creation should fail');
        $this->assertArrayHasKey('error', $response['body']);
        $this->assertArrayHasKey('details', $response['body']['error']);
    }
    
    /**
     * Test POST - Créer un tag avec génération automatique de slug
     */
    public function testCreateTagWithAutoGeneratedSlug(): void {
        $unique = uniqid();
        $tagData = [
            'name' => 'Auto Slug Tag ' . $unique,
            'color' => '#33FF57'
        ];
        
        $response = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        
        $this->assertEquals(201, $response['code']);
        $this->assertTrue($response['body']['success']);
        
        $createdTag = $response['body']['data'];
        $this->assertNotEmpty($createdTag['slug'], 'Slug should be auto-generated');
        $this->assertStringStartsWith('auto-slug-tag', $createdTag['slug'], 'Slug should be generated from name');
        
        self::$testTagId = $createdTag['id'];
    }
    
    /**
     * Test POST - Créer un tag avec couleur par défaut
     */
    public function testCreateTagWithDefaultColor(): void {
        $unique = uniqid();
        $tagData = [
            'name' => 'Default Color Tag ' . $unique,
            'slug' => 'default-color-tag-' . $unique
        ];
        
        $response = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        
        $this->assertEquals(201, $response['code']);
        $this->assertTrue($response['body']['success']);
        
        $createdTag = $response['body']['data'];
        $this->assertEquals('#3498db', $createdTag['color'], 'Should use default color');
        
        self::$testTagId = $createdTag['id'];
    }
    
    /**
     * Test POST - Créer un tag avec couleur hexadécimale invalide
     */
    public function testCreateTagWithInvalidColor(): void {
        $unique = uniqid();
        $tagData = [
            'name' => 'Invalid Color Tag ' . $unique,
            'slug' => 'invalid-color-tag-' . $unique,
            'color' => 'invalid-color-format'
        ];
        
        $response = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        
        $this->assertEquals(201, $response['code'], 'Should still create tag with default color');
        $this->assertTrue($response['body']['success']);
        
        $createdTag = $response['body']['data'];
        $this->assertEquals('#3498db', $createdTag['color'], 'Should fallback to default color');
        
        self::$testTagId = $createdTag['id'];
    }
    
    /**
     * Test POST - Créer un tag en doublon (nom ou slug)
     */
    public function testCreateDuplicateTag(): void {
        $unique = uniqid();
        $duplicateName = 'Unique Tag ' . $unique;
        
        // Créer le premier tag
        $tagData1 = [
            'name' => $duplicateName,
            'slug' => 'unique-tag-slug-' . $unique,
            'color' => '#FF5733'
        ];
        
        $response1 = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData1);
        $this->assertEquals(201, $response1['code']);
        self::$testTagId = $response1['body']['data']['id'];
        
        // Essayer de créer un tag avec le même nom
        $tagData2 = [
            'name' => $duplicateName,
            'slug' => 'different-slug-' . $unique,
            'color' => '#33FF57'
        ];
        
        $response2 = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData2);
        
        $this->assertEquals(400, $response2['code'], 'Should return error for duplicate name');
        $this->assertFalse($response2['body']['success'], 'Creation should fail');
        $this->assertStringContainsString('already exists', $response2['body']['error']['message'] ?? '');
    }
    
    /**
     * Test GET - Récupérer un tag par ID
     */
    public function testGetTagById(): void {
        // Créer d'abord un tag
        $unique = uniqid();
        $tagData = [
            'name' => 'Get By ID Tag ' . $unique,
            'slug' => 'get-by-id-tag-' . $unique,
            'color' => '#5733FF'
        ];
        
        $createResponse = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        $tagId = $createResponse['body']['data']['id'];
        self::$testTagId = $tagId;
        
        // Récupérer par ID
        $response = TestHttpClient::request('GET', "/api/admin/tags.php?id={$tagId}");
        
        $this->assertEquals(200, $response['code']);
        $this->assertTrue($response['body']['success']);
        $this->assertArrayHasKey('data', $response['body']);
        
        $tag = $response['body']['data'];
        $this->assertEquals($tagId, $tag['id']);
        $this->assertEquals($tagData['name'], $tag['name']);
        $this->assertEquals($tagData['slug'], $tag['slug']);
        $this->assertEquals($tagData['color'], $tag['color']);
    }
    
    /**
     * Test GET - Récupérer un tag inexistant
     */
    public function testGetNonExistentTag(): void {
        $response = TestHttpClient::request('GET', '/api/admin/tags.php?id=99999');
        
        $this->assertEquals(404, $response['code']);
        $this->assertFalse($response['body']['success']);
        $this->assertArrayHasKey('error', $response['body']);
        $this->assertStringContainsString('not found', $response['body']['error']['message'] ?? '');
    }
    
    /**
     * Test PUT - Modifier un tag
     */
    public function testUpdateTag(): void {
        $unique = uniqid();
        
        // Créer d'abord un tag
        $originalData = [
            'name' => 'Original Tag ' . $unique,
            'slug' => 'original-tag-' . $unique,
            'color' => '#FF5733',
            'display_order' => 100
        ];
        
        $createResponse = TestHttpClient::request('POST', '/api/admin/tags.php', $originalData);
        $tagId = $createResponse['body']['data']['id'];
        self::$testTagId = $tagId;
        
        // Modifier le tag
        $updateData = [
            'id' => $tagId,
            'name' => 'Updated Tag ' . $unique,
            'slug' => 'updated-tag-' . $unique,
            'color' => '#33FF57',
            'display_order' => 200
        ];
        
        $response = TestHttpClient::request('PUT', '/api/admin/tags.php', $updateData);
        
        $this->assertEquals(200, $response['code']);
        $this->assertTrue($response['body']['success']);
        
        // Vérifier les modifications en récupérant le tag
        $getResponse = TestHttpClient::request('GET', "/api/admin/tags.php?id={$tagId}");
        $updatedTag = $getResponse['body']['data'];
        
        $this->assertEquals($updateData['name'], $updatedTag['name']);
        $this->assertEquals($updateData['slug'], $updatedTag['slug']);
        $this->assertEquals($updateData['color'], $updatedTag['color']);
        $this->assertEquals($updateData['display_order'], $updatedTag['display_order']);
    }
    
    /**
     * Test PUT - Modifier un tag inexistant
     */
    public function testUpdateNonExistentTag(): void {
        $updateData = [
            'id' => 99999,
            'name' => 'Non Existent Tag'
        ];
        
        $response = TestHttpClient::request('PUT', '/api/admin/tags.php', $updateData);
        
        $this->assertEquals(404, $response['code']);
        $this->assertFalse($response['body']['success']);
        $this->assertStringContainsString('not found', $response['body']['error']['message'] ?? '');
    }
    
    /**
     * Test DELETE - Supprimer un tag
     */
    public function testDeleteTag(): void {
        $unique = uniqid();
        
        // Créer d'abord un tag
        $tagData = [
            'name' => 'Tag To Delete ' . $unique,
            'slug' => 'tag-to-delete-' . $unique,
            'color' => '#FF3357'
        ];
        
        $createResponse = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        $tagId = $createResponse['body']['data']['id'];
        
        // Supprimer le tag
        $response = TestHttpClient::request('DELETE', "/api/admin/tags.php?id={$tagId}");
        
        $this->assertEquals(200, $response['code']);
        $this->assertTrue($response['body']['success']);
        
        // Vérifier que le tag n'existe plus
        $getResponse = TestHttpClient::request('GET', "/api/admin/tags.php?id={$tagId}");
        $this->assertEquals(404, $getResponse['code']);
        
        // Pas besoin de cleanup car le tag est supprimé
        self::$testTagId = null;
    }
    
    /**
     * Test DELETE - Supprimer un tag inexistant
     */
    public function testDeleteNonExistentTag(): void {
        $response = TestHttpClient::request('DELETE', '/api/admin/tags.php?id=99999');
        
        $this->assertEquals(404, $response['code']);
        $this->assertFalse($response['body']['success']);
        $this->assertStringContainsString('not found', $response['body']['error']['message'] ?? '');
    }
    
    /**
     * Test POST - Créer un tag avec associations de catégories
     */
    public function testCreateTagWithCategoryAssociations(): void {
        // Créer d'abord une catégorie de test
        $unique = uniqid();
        $categoryData = [
            'name' => 'Tag Test Category ' . $unique,
            'icon' => '🏷️',
            'slug' => 'tag-test-category-' . $unique
        ];
        
        $categoryResponse = TestHttpClient::request('POST', '/api/admin/categories.php', $categoryData);
        if ($categoryResponse['code'] !== 201) {
            $this->markTestSkipped('Cannot create test category');
        }
        
        $categoryId = $categoryResponse['body']['data']['id'];
        
        // Créer un tag avec association à cette catégorie
        $tagData = [
            'name' => 'Category Associated Tag',
            'slug' => 'category-associated-tag',
            'color' => '#FF5733',
            'categories' => [$categoryId]
        ];
        
        $response = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        
        // Debug pour voir l'erreur 500
        if ($response['code'] === 500) {
            echo "Tag creation with category failed: " . json_encode($response['body']) . "\n";
        }
        
        $this->assertEquals(201, $response['code']);
        $this->assertTrue($response['body']['success']);
        
        self::$testTagId = $response['body']['data']['id'];
        
        // Cleanup de la catégorie
        TestHttpClient::request('DELETE', "/api/admin/categories.php?id={$categoryId}");
    }
    
    /**
     * Test pour validation de l'ordre d'affichage
     */
    public function testTagDisplayOrderValidation(): void {
        $unique = uniqid();
        $tagData = [
            'name' => 'Display Order Tag ' . $unique,
            'slug' => 'display-order-tag-' . $unique,
            'display_order' => -5  // Valeur négative qui devrait être corrigée à 0
        ];
        
        $response = TestHttpClient::request('POST', '/api/admin/tags.php', $tagData);
        
        $this->assertEquals(201, $response['code']);
        $this->assertTrue($response['body']['success']);
        
        $createdTag = $response['body']['data'];
        $this->assertGreaterThanOrEqual(0, $createdTag['display_order'], 'Display order should be >= 0');
        
        self::$testTagId = $createdTag['id'];
    }
}