/**
 * ICON-SELECTOR.JS - S√âLECTEUR D'IC√îNES EMOJI POUR L'INTERFACE D'ADMINISTRATION
 * 
 * Fournit une interface intuitive pour s√©lectionner des √©mojis
 * Organis√© par cat√©gories avec recherche
 * 
 * @version 1.0.0
 */

class IconSelector {
    constructor() {
        this.icons = this.getIconCategories();
        this.currentCallback = null;
        this.currentInput = null;
        
        this.init();
    }
    
    /**
     * Initialisation du s√©lecteur
     */
    init() {
        this.createModal();
        this.setupEventListeners();
    }
    
    /**
     * Cr√©ation de la modal du s√©lecteur
     */
    createModal() {
        const modalHtml = `
            <div id="iconSelectorModal" class="icon-selector-modal" style="display: none;">
                <div class="icon-selector-overlay"></div>
                <div class="icon-selector-container">
                    <div class="icon-selector-header">
                        <h3>S√©lectionner une ic√¥ne</h3>
                        <button class="icon-selector-close">&times;</button>
                    </div>
                    
                    <div class="icon-selector-search">
                        <input type="text" id="iconSearchInput" placeholder="Rechercher une ic√¥ne..." />
                    </div>
                    
                    <div class="icon-selector-categories">
                        ${this.generateCategoryTabs()}
                    </div>
                    
                    <div class="icon-selector-content">
                        ${this.generateIconGrids()}
                    </div>
                    
                    <div class="icon-selector-footer">
                        <button class="btn btn-secondary" id="iconSelectorCancel">Annuler</button>
                        <button class="btn btn-primary" id="iconSelectorConfirm" disabled>S√©lectionner</button>
                    </div>
                </div>
            </div>
        `;
        
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        this.modal = document.getElementById('iconSelectorModal');
    }
    
    /**
     * Configuration des √©couteurs d'√©v√©nements
     */
    setupEventListeners() {
        // Fermeture de la modal
        this.modal.querySelector('.icon-selector-close').addEventListener('click', () => this.close());
        this.modal.querySelector('.icon-selector-overlay').addEventListener('click', () => this.close());
        document.getElementById('iconSelectorCancel').addEventListener('click', () => this.close());
        
        // Confirmation de s√©lection
        document.getElementById('iconSelectorConfirm').addEventListener('click', () => this.confirm());
        
        // Navigation par cat√©gories
        this.modal.querySelectorAll('.icon-category-tab').forEach(tab => {
            tab.addEventListener('click', (e) => {
                const category = e.target.dataset.category;
                this.showCategory(category);
            });
        });
        
        // Recherche
        document.getElementById('iconSearchInput').addEventListener('input', (e) => {
            this.handleSearch(e.target.value);
        });
        
        // S√©lection d'ic√¥ne
        this.modal.addEventListener('click', (e) => {
            if (e.target.classList.contains('icon-item')) {
                this.selectIcon(e.target.dataset.icon);
            }
        });
        
        // Escape pour fermer
        document.addEventListener('keydown', (e) => {
            if (e.key === 'Escape' && this.modal.style.display === 'block') {
                this.close();
            }
        });
    }
    
    /**
     * G√©n√©ration des onglets de cat√©gories
     */
    generateCategoryTabs() {
        const categories = Object.keys(this.icons);
        return categories.map((category, index) => {
            const isActive = index === 0 ? 'active' : '';
            const categoryInfo = this.getCategoryInfo(category);
            return `
                <button class="icon-category-tab ${isActive}" data-category="${category}">
                    ${categoryInfo.icon} ${categoryInfo.name}
                </button>
            `;
        }).join('');
    }
    
    /**
     * G√©n√©ration des grilles d'ic√¥nes
     */
    generateIconGrids() {
        const categories = Object.keys(this.icons);
        return categories.map((category, index) => {
            const isActive = index === 0 ? 'active' : '';
            return `
                <div class="icon-category-grid ${isActive}" data-category="${category}">
                    ${this.generateIconsForCategory(category)}
                </div>
            `;
        }).join('');
    }
    
    /**
     * G√©n√©ration des ic√¥nes pour une cat√©gorie
     */
    generateIconsForCategory(category) {
        return this.icons[category].map(icon => `
            <button class="icon-item" data-icon="${icon}" title="${icon}">
                ${icon}
            </button>
        `).join('');
    }
    
    /**
     * Ouverture de la modal avec callback
     */
    open(callback, currentIcon = null, inputElement = null) {
        this.currentCallback = callback;
        this.currentInput = inputElement;
        
        // Reset de la s√©lection
        this.modal.querySelectorAll('.icon-item').forEach(item => {
            item.classList.remove('selected');
            if (currentIcon && item.dataset.icon === currentIcon) {
                item.classList.add('selected');
                this.updateConfirmButton(currentIcon);
            }
        });
        
        // Reset de la recherche
        document.getElementById('iconSearchInput').value = '';
        this.showCategory(Object.keys(this.icons)[0]);
        
        this.modal.style.display = 'block';
        document.body.style.overflow = 'hidden';
    }
    
    /**
     * Fermeture de la modal
     */
    close() {
        this.modal.style.display = 'none';
        document.body.style.overflow = '';
        this.currentCallback = null;
        this.currentInput = null;
    }
    
    /**
     * Affichage d'une cat√©gorie
     */
    showCategory(category) {
        // Mise √† jour des onglets
        this.modal.querySelectorAll('.icon-category-tab').forEach(tab => {
            tab.classList.toggle('active', tab.dataset.category === category);
        });
        
        // Mise √† jour du contenu
        this.modal.querySelectorAll('.icon-category-grid').forEach(grid => {
            grid.classList.toggle('active', grid.dataset.category === category);
        });
    }
    
    /**
     * S√©lection d'une ic√¥ne
     */
    selectIcon(icon) {
        // Mise √† jour visuelle
        this.modal.querySelectorAll('.icon-item').forEach(item => {
            item.classList.remove('selected');
        });
        this.modal.querySelector(`[data-icon="${icon}"]`).classList.add('selected');
        
        this.updateConfirmButton(icon);
    }
    
    /**
     * Mise √† jour du bouton de confirmation
     */
    updateConfirmButton(icon) {
        const confirmBtn = document.getElementById('iconSelectorConfirm');
        confirmBtn.disabled = false;
        confirmBtn.innerHTML = `S√©lectionner ${icon}`;
        confirmBtn.dataset.selectedIcon = icon;
    }
    
    /**
     * Confirmation de la s√©lection
     */
    confirm() {
        const selectedIcon = document.getElementById('iconSelectorConfirm').dataset.selectedIcon;
        if (selectedIcon && this.currentCallback) {
            this.currentCallback(selectedIcon);
            
            // Mise √† jour de l'input si fourni
            if (this.currentInput) {
                this.currentInput.value = selectedIcon;
                // D√©clencher l'√©v√©nement change
                this.currentInput.dispatchEvent(new Event('change'));
            }
        }
        this.close();
    }
    
    /**
     * Recherche d'ic√¥nes
     */
    handleSearch(query) {
        if (!query.trim()) {
            // Afficher toutes les ic√¥nes
            this.modal.querySelectorAll('.icon-item').forEach(item => {
                item.style.display = 'flex';
            });
            return;
        }
        
        const searchTerm = query.toLowerCase();
        let hasResults = false;
        
        this.modal.querySelectorAll('.icon-item').forEach(item => {
            const icon = item.dataset.icon;
            const matches = this.searchIcon(icon, searchTerm);
            
            item.style.display = matches ? 'flex' : 'none';
            if (matches) hasResults = true;
        });
        
        // Afficher un message si aucun r√©sultat
        this.showNoResults(!hasResults);
    }
    
    /**
     * Recherche dans une ic√¥ne
     */
    searchIcon(icon, query) {
        // Recherche par correspondance visuelle basique
        const iconKeywords = this.getIconKeywords(icon);
        return iconKeywords.some(keyword => keyword.includes(query));
    }
    
    /**
     * Obtention des mots-cl√©s pour une ic√¥ne
     */
    getIconKeywords(icon) {
        const keywords = {
            'üéÆ': ['jeu', 'game', 'console', 'manette'],
            'üìÅ': ['dossier', 'folder', 'repertoire'],
            'üìù': ['texte', 'text', 'ecriture', 'note'],
            'üéØ': ['cible', 'target', 'objectif'],
            'üçï': ['pizza', 'nourriture', 'food'],
            'üåü': ['etoile', 'star', 'favori'],
            'üéµ': ['musique', 'music', 'note'],
            'üöó': ['voiture', 'car', 'auto'],
            'üè†': ['maison', 'house', 'home'],
            'üé®': ['art', 'peinture', 'couleur'],
            // Ajouter plus selon les besoins
        };
        
        return keywords[icon] || [icon];
    }
    
    /**
     * Affichage du message "aucun r√©sultat"
     */
    showNoResults(show) {
        let noResultsDiv = this.modal.querySelector('.no-results');
        
        if (show && !noResultsDiv) {
            noResultsDiv = document.createElement('div');
            noResultsDiv.className = 'no-results';
            noResultsDiv.innerHTML = '<p>Aucune ic√¥ne trouv√©e</p>';
            this.modal.querySelector('.icon-selector-content').appendChild(noResultsDiv);
        } else if (!show && noResultsDiv) {
            noResultsDiv.remove();
        }
    }
    
    /**
     * Obtention des informations d'une cat√©gorie
     */
    getCategoryInfo(category) {
        const categories = {
            'smileys': { name: '√âmojis', icon: 'üòÄ' },
            'objects': { name: 'Objets', icon: 'üéÆ' },
            'food': { name: 'Nourriture', icon: 'üçï' },
            'travel': { name: 'Transport', icon: 'üöó' },
            'activities': { name: 'Activit√©s', icon: '‚öΩ' },
            'nature': { name: 'Nature', icon: 'üå≥' },
            'symbols': { name: 'Symboles', icon: 'üî•' }
        };
        
        return categories[category] || { name: category, icon: 'üìÅ' };
    }
    
    /**
     * D√©finition des cat√©gories d'ic√¥nes
     */
    getIconCategories() {
        return {
            'objects': [
                'üìÅ', 'üìÇ', 'üìÑ', 'üìù', 'üìä', 'üìà', 'üìâ', 'üéÆ', 'üïπÔ∏è', 'üéØ', 'üé≤', 
                'üé®', 'üñºÔ∏è', 'üé≠', 'üé™', 'üé®', 'üì±', 'üíª', '‚å®Ô∏è', 'üñ•Ô∏è', 'üñ®Ô∏è', 
                'üì∑', 'üìπ', 'üé•', 'üìû', '‚òéÔ∏è', 'üì†', 'üì∫', 'üìª', 'üéôÔ∏è', 'üéöÔ∏è',
                'üí°', 'üî¶', 'üïØÔ∏è', 'üìö', 'üìñ', 'üìò', 'üìô', 'üìó', 'üìï', 'üìì'
            ],
            'smileys': [
                'üòÄ', 'üòÉ', 'üòÑ', 'üòÅ', 'üòÜ', 'üòÖ', 'ü§£', 'üòÇ', 'üôÇ', 'üôÉ',
                'üòâ', 'üòä', 'üòá', 'ü•∞', 'üòç', 'ü§©', 'üòò', 'üòó', 'üòö', 'üòã',
                'üòõ', 'üòú', 'ü§™', 'üòù', 'ü§ë', 'ü§ó', 'ü§≠', 'ü§´', 'ü§î', 'ü§ê'
            ],
            'food': [
                'üçï', 'üçî', 'üçü', 'üå≠', 'ü•™', 'üåÆ', 'üåØ', 'ü•ô', 'üßÜ', 'ü•ö',
                'üç≥', 'ü•ò', 'üç≤', 'ü•ó', 'üçø', 'üßà', 'ü•õ', 'üç∫', 'üçª', 'ü•Ç',
                'üç∑', 'ü•É', 'üç∏', 'üçπ', '‚òï', 'üçµ', 'üßÉ', 'ü•§', 'üçé', 'üçä'
            ],
            'travel': [
                'üöó', 'üöï', 'üöô', 'üöå', 'üöé', 'üèéÔ∏è', 'üöì', 'üöë', 'üöí', 'üöê',
                'üöö', 'üöõ', 'üöú', 'üèçÔ∏è', 'üõµ', 'üö≤', 'üõ¥', 'üõπ', 'üöÅ', 'üõ©Ô∏è',
                '‚úàÔ∏è', 'üöÄ', 'üõ∏', 'üö¢', '‚õµ', 'üö§', '‚õ¥Ô∏è', 'üõ≥Ô∏è', 'üöÇ', 'üöÜ'
            ],
            'activities': [
                '‚öΩ', 'üèÄ', 'üèà', '‚öæ', 'ü•é', 'üéæ', 'üèê', 'üèâ', 'ü•è', 'üé±',
                'ü™Ä', 'üèì', 'üè∏', 'üèí', 'üèë', 'ü•ç', 'üèè', 'ü™É', 'ü•Ö', '‚õ≥',
                'ü™Å', 'üèπ', 'üé£', 'ü§ø', 'ü•ä', 'ü•ã', 'üéΩ', 'üõπ', 'üõ∑', '‚õ∏Ô∏è'
            ],
            'nature': [
                'üå±', 'üåø', '‚òòÔ∏è', 'üçÄ', 'üéç', 'üéã', 'üçÉ', 'üåæ', 'üåµ', 'üå≤',
                'üå≥', 'üå¥', 'üå∏', 'üå∫', 'üåª', 'üåπ', 'ü•Ä', 'üå∑', 'üåº', 'üåô',
                '‚≠ê', 'üåü', 'üí´', '‚ú®', 'üåç', 'üåé', 'üåè', 'üî•', 'üíß', '‚ö°'
            ],
            'symbols': [
                '‚ù§Ô∏è', 'üß°', 'üíõ', 'üíö', 'üíô', 'üíú', 'üñ§', 'ü§ç', 'ü§é', 'üíî',
                '‚ù£Ô∏è', 'üíï', 'üíñ', 'üíó', 'üíò', 'üíù', 'üíû', 'üíü', 'üí¢', 'üíØ',
                'üî•', 'üí•', 'üí§', 'üí®', 'üí¶', 'üí´', '‚≠ê', 'üåü', '‚ú®', 'üéâ'
            ]
        };
    }
}

// CSS pour le s√©lecteur d'ic√¥nes
const iconSelectorCSS = `
.icon-selector-modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10000;
    display: flex;
    align-items: center;
    justify-content: center;
}

.icon-selector-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: rgba(0, 0, 0, 0.5);
}

.icon-selector-container {
    position: relative;
    background: var(--admin-bg-white);
    border-radius: var(--admin-radius-lg);
    width: 90vw;
    max-width: 600px;
    max-height: 80vh;
    display: flex;
    flex-direction: column;
    box-shadow: var(--admin-shadow-hover);
}

.icon-selector-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    padding: 1.5rem;
    border-bottom: 1px solid var(--admin-border-light);
}

.icon-selector-header h3 {
    margin: 0;
    color: var(--admin-text-primary);
}

.icon-selector-close {
    background: none;
    border: none;
    font-size: 1.5rem;
    cursor: pointer;
    padding: 0.5rem;
    color: var(--admin-text-secondary);
}

.icon-selector-search {
    padding: 1rem;
    border-bottom: 1px solid var(--admin-border-light);
}

.icon-selector-search input {
    width: 100%;
    padding: 0.75rem;
    border: 2px solid var(--admin-border-light);
    border-radius: var(--admin-radius);
    font-size: 1rem;
}

.icon-selector-categories {
    display: flex;
    gap: 0.5rem;
    padding: 1rem;
    border-bottom: 1px solid var(--admin-border-light);
    overflow-x: auto;
}

.icon-category-tab {
    background: none;
    border: 2px solid var(--admin-border-light);
    padding: 0.5rem 1rem;
    border-radius: var(--admin-radius);
    cursor: pointer;
    white-space: nowrap;
    font-size: 0.9rem;
    color: var(--admin-text-secondary);
    transition: all 0.3s ease;
}

.icon-category-tab.active {
    background: var(--admin-primary);
    border-color: var(--admin-primary);
    color: white;
}

.icon-selector-content {
    flex: 1;
    overflow-y: auto;
    padding: 1rem;
}

.icon-category-grid {
    display: none;
    grid-template-columns: repeat(auto-fill, minmax(50px, 1fr));
    gap: 0.5rem;
}

.icon-category-grid.active {
    display: grid;
}

.icon-item {
    background: none;
    border: 2px solid var(--admin-border-light);
    border-radius: var(--admin-radius);
    padding: 1rem;
    font-size: 1.5rem;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    aspect-ratio: 1;
}

.icon-item:hover {
    background: var(--admin-bg-light);
    border-color: var(--admin-primary);
}

.icon-item.selected {
    background: var(--admin-primary);
    border-color: var(--admin-primary);
    color: white;
}

.icon-selector-footer {
    display: flex;
    gap: 1rem;
    padding: 1.5rem;
    border-top: 1px solid var(--admin-border-light);
    justify-content: flex-end;
}

.no-results {
    text-align: center;
    color: var(--admin-text-secondary);
    padding: 2rem;
}

@media (max-width: 768px) {
    .icon-selector-container {
        width: 95vw;
        max-height: 90vh;
    }
    
    .icon-category-grid {
        grid-template-columns: repeat(auto-fill, minmax(40px, 1fr));
    }
    
    .icon-item {
        padding: 0.75rem;
        font-size: 1.2rem;
    }
}
`;

// Injection du CSS
const style = document.createElement('style');
style.textContent = iconSelectorCSS;
document.head.appendChild(style);

// Instance globale
window.iconSelector = new IconSelector();